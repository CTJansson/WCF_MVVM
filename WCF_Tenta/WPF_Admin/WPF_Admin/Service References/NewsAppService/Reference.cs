//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_Admin.NewsAppService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminAccount", Namespace="http://schemas.datacontract.org/2004/07/WCF_Admin.Models")]
    [System.SerializableAttribute()]
    public partial class AdminAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_Admin.NewsAppService.AdminAuthor AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_Admin.NewsAppService.AdminAuthor Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminAuthor", Namespace="http://schemas.datacontract.org/2004/07/WCF_Admin.Models")]
    [System.SerializableAttribute()]
    public partial class AdminAuthor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminNewsPosts", Namespace="http://schemas.datacontract.org/2004/07/WCF_Admin.Models")]
    [System.SerializableAttribute()]
    public partial class AdminNewsPosts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_Admin.NewsAppService.AdminAuthor AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WrittenByField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_Admin.NewsAppService.AdminAuthor Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WrittenBy {
            get {
                return this.WrittenByField;
            }
            set {
                if ((object.ReferenceEquals(this.WrittenByField, value) != true)) {
                    this.WrittenByField = value;
                    this.RaisePropertyChanged("WrittenBy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewsCategories", Namespace="http://schemas.datacontract.org/2004/07/WCF_Admin.Models")]
    [System.SerializableAttribute()]
    public partial class NewsCategories : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewsAppService.INewsService")]
    public interface INewsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/UserAuthentication", ReplyAction="http://tempuri.org/INewsService/UserAuthenticationResponse")]
        bool UserAuthentication(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/UserAuthentication", ReplyAction="http://tempuri.org/INewsService/UserAuthenticationResponse")]
        System.Threading.Tasks.Task<bool> UserAuthenticationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetLoggedInAdminAccount", ReplyAction="http://tempuri.org/INewsService/GetLoggedInAdminAccountResponse")]
        WPF_Admin.NewsAppService.AdminAccount GetLoggedInAdminAccount(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetLoggedInAdminAccount", ReplyAction="http://tempuri.org/INewsService/GetLoggedInAdminAccountResponse")]
        System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminAccount> GetLoggedInAdminAccountAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAllNewsPosts", ReplyAction="http://tempuri.org/INewsService/GetAllNewsPostsResponse")]
        WPF_Admin.NewsAppService.AdminNewsPosts[] GetAllNewsPosts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAllNewsPosts", ReplyAction="http://tempuri.org/INewsService/GetAllNewsPostsResponse")]
        System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetAllNewsPostsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetFilteredNewsPosts", ReplyAction="http://tempuri.org/INewsService/GetFilteredNewsPostsResponse")]
        WPF_Admin.NewsAppService.AdminNewsPosts[] GetFilteredNewsPosts(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetFilteredNewsPosts", ReplyAction="http://tempuri.org/INewsService/GetFilteredNewsPostsResponse")]
        System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetFilteredNewsPostsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewsPost", ReplyAction="http://tempuri.org/INewsService/CreateNewsPostResponse")]
        bool CreateNewsPost(WPF_Admin.NewsAppService.AdminNewsPosts newspost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewsPost", ReplyAction="http://tempuri.org/INewsService/CreateNewsPostResponse")]
        System.Threading.Tasks.Task<bool> CreateNewsPostAsync(WPF_Admin.NewsAppService.AdminNewsPosts newspost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetEveryCategory", ReplyAction="http://tempuri.org/INewsService/GetEveryCategoryResponse")]
        WPF_Admin.NewsAppService.NewsCategories[] GetEveryCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetEveryCategory", ReplyAction="http://tempuri.org/INewsService/GetEveryCategoryResponse")]
        System.Threading.Tasks.Task<WPF_Admin.NewsAppService.NewsCategories[]> GetEveryCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAuthorNewsposts", ReplyAction="http://tempuri.org/INewsService/GetAuthorNewspostsResponse")]
        WPF_Admin.NewsAppService.AdminNewsPosts[] GetAuthorNewsposts(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAuthorNewsposts", ReplyAction="http://tempuri.org/INewsService/GetAuthorNewspostsResponse")]
        System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetAuthorNewspostsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/EditNewsPost", ReplyAction="http://tempuri.org/INewsService/EditNewsPostResponse")]
        void EditNewsPost(int id, WPF_Admin.NewsAppService.AdminNewsPosts post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/EditNewsPost", ReplyAction="http://tempuri.org/INewsService/EditNewsPostResponse")]
        System.Threading.Tasks.Task EditNewsPostAsync(int id, WPF_Admin.NewsAppService.AdminNewsPosts post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteNewsPost", ReplyAction="http://tempuri.org/INewsService/DeleteNewsPostResponse")]
        void DeleteNewsPost(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteNewsPost", ReplyAction="http://tempuri.org/INewsService/DeleteNewsPostResponse")]
        System.Threading.Tasks.Task DeleteNewsPostAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewsServiceChannel : WPF_Admin.NewsAppService.INewsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewsServiceClient : System.ServiceModel.ClientBase<WPF_Admin.NewsAppService.INewsService>, WPF_Admin.NewsAppService.INewsService {
        
        public NewsServiceClient() {
        }
        
        public NewsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UserAuthentication(string username, string password) {
            return base.Channel.UserAuthentication(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> UserAuthenticationAsync(string username, string password) {
            return base.Channel.UserAuthenticationAsync(username, password);
        }
        
        public WPF_Admin.NewsAppService.AdminAccount GetLoggedInAdminAccount(string username) {
            return base.Channel.GetLoggedInAdminAccount(username);
        }
        
        public System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminAccount> GetLoggedInAdminAccountAsync(string username) {
            return base.Channel.GetLoggedInAdminAccountAsync(username);
        }
        
        public WPF_Admin.NewsAppService.AdminNewsPosts[] GetAllNewsPosts() {
            return base.Channel.GetAllNewsPosts();
        }
        
        public System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetAllNewsPostsAsync() {
            return base.Channel.GetAllNewsPostsAsync();
        }
        
        public WPF_Admin.NewsAppService.AdminNewsPosts[] GetFilteredNewsPosts(int id) {
            return base.Channel.GetFilteredNewsPosts(id);
        }
        
        public System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetFilteredNewsPostsAsync(int id) {
            return base.Channel.GetFilteredNewsPostsAsync(id);
        }
        
        public bool CreateNewsPost(WPF_Admin.NewsAppService.AdminNewsPosts newspost) {
            return base.Channel.CreateNewsPost(newspost);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewsPostAsync(WPF_Admin.NewsAppService.AdminNewsPosts newspost) {
            return base.Channel.CreateNewsPostAsync(newspost);
        }
        
        public WPF_Admin.NewsAppService.NewsCategories[] GetEveryCategory() {
            return base.Channel.GetEveryCategory();
        }
        
        public System.Threading.Tasks.Task<WPF_Admin.NewsAppService.NewsCategories[]> GetEveryCategoryAsync() {
            return base.Channel.GetEveryCategoryAsync();
        }
        
        public WPF_Admin.NewsAppService.AdminNewsPosts[] GetAuthorNewsposts(int id) {
            return base.Channel.GetAuthorNewsposts(id);
        }
        
        public System.Threading.Tasks.Task<WPF_Admin.NewsAppService.AdminNewsPosts[]> GetAuthorNewspostsAsync(int id) {
            return base.Channel.GetAuthorNewspostsAsync(id);
        }
        
        public void EditNewsPost(int id, WPF_Admin.NewsAppService.AdminNewsPosts post) {
            base.Channel.EditNewsPost(id, post);
        }
        
        public System.Threading.Tasks.Task EditNewsPostAsync(int id, WPF_Admin.NewsAppService.AdminNewsPosts post) {
            return base.Channel.EditNewsPostAsync(id, post);
        }
        
        public void DeleteNewsPost(int id) {
            base.Channel.DeleteNewsPost(id);
        }
        
        public System.Threading.Tasks.Task DeleteNewsPostAsync(int id) {
            return base.Channel.DeleteNewsPostAsync(id);
        }
    }
}
